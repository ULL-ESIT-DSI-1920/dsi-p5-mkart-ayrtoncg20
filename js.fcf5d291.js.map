{"version":3,"sources":["js/KartPlayer.js","js/index.js"],"names":["KartPlayer","HTMLElement","name","config","attachShadow","mode","y","image","x","shadowRoot","innerHTML","styles","road","appendChild","render","console","log","imagen_item","Math","random","x_item","y_item","customElements","define","startButton","document","querySelector","restartButton","karts","timer","Object","entries","players","length","kart","addToRoad","push","startRace","setInterval","startIterarion","disabled","endRace","clearInterval","forEach","isWinner","win","lose","restartRace","restart","inc","some","onclick"],"mappings":"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","file":"js.fcf5d291.js","sourceRoot":"../src","sourcesContent":["export class KartPlayer extends HTMLElement {\n  constructor(name, config) {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this.name = name;\n    this.y = config.y;\n    this.image = config.image;\n    this.x = 0;\n\n  }\n\n  get styles() {\n    return `\n       :host {\n         position: absolute;\n         display: inline-block;\n         left: ${this.x}px;\n         top: ${this.y}px;\n         transform: translateX(var(--x)) translateY(var(--y));\n         transition: transform 10s;\n         will-change: transform;\n       }\n       .winner{\n         filter: drop-shadow(0 0 10px yellow);\n         z-index: 5;\n       }\n       .lose{\n         opacity: 0.25;\n       }\n       .item{\n         left: ${this.x_item}px;\n         top: ${this.y_item}px;\n       }\n     `;\n  }\n\n  render() {\n\n    this.shadowRoot.innerHTML = `\n          <style>${this.styles}</style>\n          <item-kart></item-kart>\n          <img src=\"${this.image}\" alt=\"${this.name}\">\n        `;\n  }\n  addToRoad(road) {\n    road.appendChild(this);\n    this.render()\n\n\n  }\n  inc() {\n    console.log(this.imagen_item)\n    this.x += Math.random() * (5 - 0) + 0;;\n    this.render()\n  }\n  isWinner() {\n    if (this.x >= 930) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  win() {\n    this.shadowRoot.innerHTML = `\n          <style>${this.styles}</style>\n          <item-kart></item-kart>\n          <img class=\"winner\" src=\"${this.image}\">\n        `;\n  }\n  lose() {\n    this.shadowRoot.innerHTML = `\n          <style>${this.styles}</style>\n          <item-kart></item-kart>\n          <img class=\"lose\" src=\"${this.image}\">\n        `;\n  }\n  restart() {\n    this.x = 0;\n    this.render()\n  }\n}\ncustomElements.define('kart-player', KartPlayer); //Asocia la etiqueta HTML a la clase\n\n//funciones que tengo que realizar\n//inc() metodo incrementar, el metodo tendra una logica para hacer avanzar a ese kart una serie de pasos\n//isWinner() comprobar si alguno de los kart si es el ganador, tenemos que mirar la coordenada x para ver si ha llegado al final\n//win() aspectos visuales\n  //--x: 947px; --y: -1px;\n  //:host-context(.winner){\n    //filter: drop-shadow(0 0 6px yellow);\n    //z-index: 5;\n    //lost() aspectos visuales","import players from \"../assets/kart-*.png\"\nimport { KartPlayer } from \"./KartPlayer.js\";\n\nconst startButton = document.querySelector(\".start\");\nconst restartButton = document.querySelector(\".restart\");\nconst road = document.querySelector(\".road\");\nconst karts = [];\nlet timer = null;\n\nfor (const [name, image] of Object.entries(players)) {\n    const config = {\n        image,\n        y: karts.length * 64\n    };\n    const kart = new KartPlayer(name, config);\n    kart.addToRoad(road);\n    karts.push(kart);\n}\n\nconst startRace = () => {\n    timer = setInterval(() => startIterarion(), 1000 / 60);\n    startButton.disabled = true;\n    restartButton.disabled = true;\n};\n\n\nconst endRace = () => {\n    clearInterval(timer);\n    karts.forEach(kart => (kart.isWinner() ? kart.win() : kart.lose()));\n    restartButton.disabled = false;\n};\n\nconst restartRace = () => {\n    karts.forEach(kart => kart.restart());\n    startButton.disabled = false;\n};\n\nconst startIterarion = () => {\n\n    karts.forEach(kart => kart.inc());\n    if (karts.some(kart => kart.isWinner())) endRace();\n};\n\nstartButton.onclick = () => startRace();\nrestartButton.onclick = () => restartRace();"]}